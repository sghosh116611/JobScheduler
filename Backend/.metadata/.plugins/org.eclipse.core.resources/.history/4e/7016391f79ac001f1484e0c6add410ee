package com.apica.assignment.backend.controller;

import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apica.assignment.backend.constant.JobStatus;
import com.apica.assignment.backend.dto.JobRequest;
import com.apica.assignment.backend.dto.JobResponse;
import com.apica.assignment.backend.model.Job;
import com.apica.assignment.backend.service.JobSchedulerService;
import com.apica.assignment.backend.util.JobRequestValidator;

@RestController
@RequestMapping("/jobs")
public class JobController {

	private static String CLASSNAME = JobController.class.toString();
	private static final Logger logger = Logger.getLogger(CLASSNAME);

	private final JobSchedulerService jobSchedulerService;

	@Autowired
	public JobController(JobSchedulerService jobSchedulerService) {
		this.jobSchedulerService = jobSchedulerService;
	}

	/**
	 * Endpoint to submit a new job.
	 *
	 * @param request The job request containing name and duration.
	 * @return ResponseEntity with the created job and HTTP status.
	 */
	@PostMapping
	public ResponseEntity<JobResponse> submitJob(@RequestBody JobRequest request) {
		String methodName = "submitJob";

		logger.logp(Level.INFO, CLASSNAME, methodName, "Start of submitJob");
		if (JobRequestValidator.isInvalidJobRequest(request)) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new JobResponse("Invalid request data", 0, null));
		}
		Job job = new Job(request.getName(), Duration.ofSeconds(request.getDuration()));
		jobSchedulerService.submitJob(job);
		logger.logp(Level.INFO, CLASSNAME, methodName, "End of submitJob");
		return ResponseEntity.status(HttpStatus.CREATED).body(JobResponse.fromJob(job));
	}

	/**
	 * Endpoint to retrieve the current list of jobs.
	 *
	 * @return ResponseEntity with the list of jobs and HTTP status.
	 */
	@GetMapping
	public ResponseEntity<List<JobResponse>> getAllJobs() {
		String methodName = "getAllJobs";

		logger.logp(Level.INFO, CLASSNAME, methodName, "Start of get getAllJobs");
		// Convert the HashMap to a List of JobResponse
		HashMap<Job, JobStatus> jobsMap = jobSchedulerService.getJobs();
		List<JobResponse> jobs = jobsMap.entrySet().stream()
				.map(entry -> new JobResponse(entry.getKey(), entry.getValue().name())).collect(Collectors.toList());
		logger.logp(Level.FINE, CLASSNAME, methodName, "Jobs in queue --" + jobs.size());
		logger.logp(Level.INFO, CLASSNAME, methodName, "End of getAllJobs");
		return ResponseEntity.ok(jobs);

	}
}
