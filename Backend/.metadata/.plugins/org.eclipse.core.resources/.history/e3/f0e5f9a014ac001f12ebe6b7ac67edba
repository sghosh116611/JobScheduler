package com.apica.assignment.backend.websocket;

import java.io.IOException;
import java.util.Collections;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Logger;

import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.apica.assignment.backend.dto.JobResponse;

@Component
public class JobWebSocketHandler extends TextWebSocketHandler {
	
	private static final Logger logger = LoggerFactory.getLogger(JobWebSocketHandler.class);
	
	private static final Set<WebSocketSession> sessions = Collections.newSetFromMap(new ConcurrentHashMap<>());

	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		sessions.add(session);
		System.out.println("WebSocket connection established: " + session.getId());
	}

	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		sessions.remove(session);
		System.out.println("WebSocket connection closed: " + session.getId());
		Logger logger = Logger.getLogger(null)
	}

	public void broadcastJobStatus(JobResponse jobResponse) {
		String message = String.format("Job %s is now %s", jobResponse.getName(), jobResponse.getStatus());
		System.out.println("Broadcasting message: " + message);
		
		System.out.println(sessions.size());

		// Log each session's open state before sending the message
		for (WebSocketSession session : sessions) {
			try {
				// Log whether session is open before sending the message
				System.out.println("Checking if session is open: " + session.getId() + " -> " + session.isOpen());
				if (session.isOpen()) {
					session.sendMessage(new TextMessage(message));
					System.out.println("Sent message to session: " + session.getId());
				} else {
					System.out.println("Session is not open: " + session.getId());
				}
			} catch (IOException e) {
				System.err.println("Error sending WebSocket message: " + e.getMessage());
			}
		}
	}
}
